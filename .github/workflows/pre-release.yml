name: pre-release

on:
  push:
    # Publish `pre-v1.2.3` tags as releases.
    tags:
      - pre-v*

jobs:
  build:
    name: Build Release
    strategy:
      matrix:
        go-version: [1.19.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - run: go env -w GOPRIVATE="github.com/bnb-chain/*"
      - run: git config --global url."https://${{ secrets.GH_ACCESS_TOKEN }}@github.com".insteadOf "https://github.com"

      # ==============================
      #       Linux/Macos/Windows Build
      # ==============================

#       used to debug workflow
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: Build Binary for ${{matrix.os}}
        env:
          CGO_ENABLED: "0"
        run: make build

      # ==============================
      #       Upload artifacts
      # ==============================

      - name: Upload Linux Build
        uses: actions/upload-artifact@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux
          path: ./build

      - name: Upload MacOS Build
        uses: actions/upload-artifact@v3
        if: matrix.os == 'macos-latest'
        with:
          name: macos
          path: ./build

      - name: Upload Windows Build
        uses: actions/upload-artifact@v3
        if: matrix.os == 'windows-latest'
        with:
          name: windows
          path: ./build

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set Env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v3

      # ==============================
      #       Download artifacts
      # ==============================

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: linux
          path: ./linux

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos
          path: ./macos

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows
          path: ./windows

      - run: zip -r linux_binary.zip linux
      - run: zip -r macos_binary.zip macos
      - run: zip -r windows_binary.zip windows
      - run: zip -r mainnet_config.zip asset/mainnet
      - run: zip -r testnet_config.zip asset/testnet

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: |
            git commit: ${{ github.sha }}
          draft: true
          prerelease: true
          files: |
            ./linux_binary.zip
            ./macos_binary.zip
            ./windows_binary.zip
            ./mainnet_config.zip
            ./testnet_config.zip
